// Generated by <a href="http://scalaxb.org/">scalaxb</a>.


case class Address(extension: Seq[Extension] = Nil,
  use: Option[Code] = None,
  text: Option[StringType] = None,
  line: Seq[StringType] = Nil,
  city: Option[StringType] = None,
  state: Option[StringType] = None,
  zip: Option[StringType] = None,
  country: Option[StringType] = None,
  period: Option[Period] = None,
  attributes: Map[String, scalaxb.DataRecord[Any]] = Map.empty) extends Structurable with ExtensionOption {
  lazy val id = attributes.get("@id") map { _.as[java.net.URI]}
}

      
      


case class Age(extension: Seq[Extension] = Nil,
  value: Option[Decimal] = None,
  comparator: Option[Code] = None,
  units: Option[StringType] = None,
  system: Option[Uri] = None,
  code: Option[Code] = None,
  attributes: Map[String, scalaxb.DataRecord[Any]] = Map.empty) extends Quantityable {
  lazy val id = attributes.get("@id") map { _.as[java.net.URI]}
}

      
      


case class Attachment(extension: Seq[Extension] = Nil,
  contentType: Code,
  language: Option[Code] = None,
  data: Option[Base64BinaryType] = None,
  url: Option[Uri] = None,
  size: Option[Integer] = None,
  hash: Option[Base64BinaryType] = None,
  title: Option[StringType] = None,
  attributes: Map[String, scalaxb.DataRecord[Any]] = Map.empty) extends Type with ExtensionOption {
  lazy val id = attributes.get("@id") map { _.as[java.net.URI]}
}

      
      


case class CodeableConcept(extension: Seq[Extension] = Nil,
  coding: Seq[Coding] = Nil,
  text: Option[StringType] = None,
  attributes: Map[String, scalaxb.DataRecord[Any]] = Map.empty) extends Type with ExtensionOption {
  lazy val id = attributes.get("@id") map { _.as[java.net.URI]}
}

      
      


case class Coding(extension: Seq[Extension] = Nil,
  system: Option[Uri] = None,
  version: Option[StringType] = None,
  code: Option[Code] = None,
  display: Option[StringType] = None,
  primary: Option[BooleanType] = None,
  valueSet: Option[Uri] = None,
  attributes: Map[String, scalaxb.DataRecord[Any]] = Map.empty) extends Type with ExtensionOption {
  lazy val id = attributes.get("@id") map { _.as[java.net.URI]}
}

      
      


case class Contact(extension: Seq[Extension] = Nil,
  system: Option[Code] = None,
  value: Option[StringType] = None,
  use: Option[Code] = None,
  period: Option[Period] = None,
  attributes: Map[String, scalaxb.DataRecord[Any]] = Map.empty) extends Structurable with ExtensionOption {
  lazy val id = attributes.get("@id") map { _.as[java.net.URI]}
}

      
      


case class Count(extension: Seq[Extension] = Nil,
  value: Option[Decimal] = None,
  comparator: Option[Code] = None,
  units: Option[StringType] = None,
  system: Option[Uri] = None,
  code: Option[Code] = None,
  attributes: Map[String, scalaxb.DataRecord[Any]] = Map.empty) extends Quantityable {
  lazy val id = attributes.get("@id") map { _.as[java.net.URI]}
}

      
      


case class Distance(extension: Seq[Extension] = Nil,
  value: Option[Decimal] = None,
  comparator: Option[Code] = None,
  units: Option[StringType] = None,
  system: Option[Uri] = None,
  code: Option[Code] = None,
  attributes: Map[String, scalaxb.DataRecord[Any]] = Map.empty) extends Quantityable {
  lazy val id = attributes.get("@id") map { _.as[java.net.URI]}
}

      
      


case class Duration(extension: Seq[Extension] = Nil,
  value: Option[Decimal] = None,
  comparator: Option[Code] = None,
  units: Option[StringType] = None,
  system: Option[Uri] = None,
  code: Option[Code] = None,
  attributes: Map[String, scalaxb.DataRecord[Any]] = Map.empty) extends Quantityable {
  lazy val id = attributes.get("@id") map { _.as[java.net.URI]}
}

      
      


trait Elementable {
  def extension: Seq[Extension]
  def id: Option[java.net.URI]
}


case class Element(extension: Seq[Extension] = Nil,
  attributes: Map[String, scalaxb.DataRecord[Any]] = Map.empty) extends Elementable {
  lazy val id = attributes.get("@id") map { _.as[java.net.URI]}
}

      
      


case class Extension(extension: Seq[Extension] = Nil,
  extensionoption: Option[scalaxb.DataRecord[ExtensionOption]] = None,
  attributes: Map[String, scalaxb.DataRecord[Any]] = Map.empty) extends Elementable {
  lazy val id = attributes.get("@id") map { _.as[java.net.URI]}
  lazy val url = attributes.get("@url") map { _.as[java.net.URI]}
}

      
      

trait ExtensionOption

case class HumanName(extension: Seq[Extension] = Nil,
  use: Option[Code] = None,
  text: Option[StringType] = None,
  family: Seq[StringType] = Nil,
  given: Seq[StringType] = Nil,
  prefix: Seq[StringType] = Nil,
  suffix: Seq[StringType] = Nil,
  period: Option[Period] = None,
  attributes: Map[String, scalaxb.DataRecord[Any]] = Map.empty) extends Structurable with ExtensionOption {
  lazy val id = attributes.get("@id") map { _.as[java.net.URI]}
}

      
      


case class Identifier(extension: Seq[Extension] = Nil,
  system: Option[Uri] = None,
  id: Option[StringType] = None,
  attributes: Map[String, scalaxb.DataRecord[Any]] = Map.empty) extends Type with ExtensionOption {
  lazy val id = attributes.get("@id") map { _.as[java.net.URI]}
}

      
      


case class Money(extension: Seq[Extension] = Nil,
  value: Option[Decimal] = None,
  comparator: Option[Code] = None,
  units: Option[StringType] = None,
  system: Option[Uri] = None,
  code: Option[Code] = None,
  attributes: Map[String, scalaxb.DataRecord[Any]] = Map.empty) extends Quantityable {
  lazy val id = attributes.get("@id") map { _.as[java.net.URI]}
}

      
      


case class Period(extension: Seq[Extension] = Nil,
  start: Option[DateTime] = None,
  end: Option[DateTime] = None,
  attributes: Map[String, scalaxb.DataRecord[Any]] = Map.empty) extends Type with ExtensionOption {
  lazy val id = attributes.get("@id") map { _.as[java.net.URI]}
}

      
      


trait Quantityable extends Type with ExtensionOption {
  def extension: Seq[Extension]
  def value: Option[Decimal]
  def comparator: Option[Code]
  def units: Option[StringType]
  def system: Option[Uri]
  def code: Option[Code]
  def id: Option[java.net.URI]
}


case class Quantity(extension: Seq[Extension] = Nil,
  value: Option[Decimal] = None,
  comparator: Option[Code] = None,
  units: Option[StringType] = None,
  system: Option[Uri] = None,
  code: Option[Code] = None,
  attributes: Map[String, scalaxb.DataRecord[Any]] = Map.empty) extends Quantityable {
  lazy val id = attributes.get("@id") map { _.as[java.net.URI]}
}

      
      


case class RangeType(extension: Seq[Extension] = Nil,
  low: Option[Quantityable] = None,
  high: Option[Quantityable] = None,
  attributes: Map[String, scalaxb.DataRecord[Any]] = Map.empty) extends Type with ExtensionOption {
  lazy val id = attributes.get("@id") map { _.as[java.net.URI]}
}

      
      


case class Ratio(extension: Seq[Extension] = Nil,
  numerator: Option[Quantityable] = None,
  denominator: Option[Quantityable] = None,
  attributes: Map[String, scalaxb.DataRecord[Any]] = Map.empty) extends Type with ExtensionOption {
  lazy val id = attributes.get("@id") map { _.as[java.net.URI]}
}

      
      


case class Repeat(frequency: Option[Integer] = None,
  when: Option[Code] = None,
  duration: Decimal,
  units: Code,
  count: Option[Integer] = None,
  end: Option[DateTime] = None)
      
      


case class ResourceReference(extension: Seq[Extension] = Nil,
  reference: Option[StringType] = None,
  display: Option[StringType] = None,
  attributes: Map[String, scalaxb.DataRecord[Any]] = Map.empty) extends Type with ExtensionOption {
  lazy val id = attributes.get("@id") map { _.as[java.net.URI]}
}

      
      


case class SampledData(extension: Seq[Extension] = Nil,
  origin: Quantityable,
  period: Decimal,
  factor: Decimal,
  lowerLimit: Option[Decimal] = None,
  upperLimit: Option[Decimal] = None,
  dimensions: Integer,
  data: StringType,
  attributes: Map[String, scalaxb.DataRecord[Any]] = Map.empty) extends Type with ExtensionOption {
  lazy val id = attributes.get("@id") map { _.as[java.net.URI]}
}

      
      


case class Schedule(extension: Seq[Extension] = Nil,
  event: Seq[Period] = Nil,
  repeat: Option[Repeat] = None,
  attributes: Map[String, scalaxb.DataRecord[Any]] = Map.empty) extends Structurable with ExtensionOption {
  lazy val id = attributes.get("@id") map { _.as[java.net.URI]}
}

      
      


trait Structurable extends Type {
  def extension: Seq[Extension]
  def id: Option[java.net.URI]
}


case class Structure(extension: Seq[Extension] = Nil,
  attributes: Map[String, scalaxb.DataRecord[Any]] = Map.empty) extends Structurable {
  lazy val id = attributes.get("@id") map { _.as[java.net.URI]}
}

      
      


trait Type extends Elementable {
  def extension: Seq[Extension]
  def id: Option[java.net.URI]
}


case class Base64BinaryType(extension: Seq[Extension] = Nil,
  attributes: Map[String, scalaxb.DataRecord[Any]] = Map.empty) extends Elementable with ExtensionOption {
  lazy val id = attributes.get("@id") map { _.as[java.net.URI]}
  lazy val valueAttribute = attributes.get("@value") map { _.as[scalaxb.Base64Binary]}
}

      
      


case class BooleanType(extension: Seq[Extension] = Nil,
  attributes: Map[String, scalaxb.DataRecord[Any]] = Map.empty) extends Elementable with ExtensionOption {
  lazy val id = attributes.get("@id") map { _.as[java.net.URI]}
  lazy val valueAttribute = attributes.get("@value") map { _.as[Boolean]}
}

      
      


case class Code(extension: Seq[Extension] = Nil,
  attributes: Map[String, scalaxb.DataRecord[Any]] = Map.empty) extends Elementable with ExtensionOption {
  lazy val id = attributes.get("@id") map { _.as[java.net.URI]}
  lazy val valueAttribute = attributes.get("@value") map { _.as[String]}
}

      
      


case class Date(extension: Seq[Extension] = Nil,
  attributes: Map[String, scalaxb.DataRecord[Any]] = Map.empty) extends Elementable with ExtensionOption {
  lazy val id = attributes.get("@id") map { _.as[java.net.URI]}
  lazy val valueAttribute = attributes.get("@value") map { _.as[String]}
}

      
      


case class DateTime(extension: Seq[Extension] = Nil,
  attributes: Map[String, scalaxb.DataRecord[Any]] = Map.empty) extends Elementable with ExtensionOption {
  lazy val id = attributes.get("@id") map { _.as[java.net.URI]}
  lazy val valueAttribute = attributes.get("@value") map { _.as[String]}
}

      
      


case class Decimal(extension: Seq[Extension] = Nil,
  attributes: Map[String, scalaxb.DataRecord[Any]] = Map.empty) extends Elementable with ExtensionOption {
  lazy val id = attributes.get("@id") map { _.as[java.net.URI]}
  lazy val valueAttribute = attributes.get("@value") map { _.as[BigDecimal]}
}

      
      


case class Id(extension: Seq[Extension] = Nil,
  attributes: Map[String, scalaxb.DataRecord[Any]] = Map.empty) extends Elementable {
  lazy val id = attributes.get("@id") map { _.as[java.net.URI]}
  lazy val valueAttribute = attributes.get("@value") map { _.as[String]}
}

      
      


case class Instant(extension: Seq[Extension] = Nil,
  attributes: Map[String, scalaxb.DataRecord[Any]] = Map.empty) extends Elementable with ExtensionOption {
  lazy val id = attributes.get("@id") map { _.as[java.net.URI]}
  lazy val valueAttribute = attributes.get("@value") map { _.as[String]}
}

      
      


case class Integer(extension: Seq[Extension] = Nil,
  attributes: Map[String, scalaxb.DataRecord[Any]] = Map.empty) extends Elementable with ExtensionOption {
  lazy val id = attributes.get("@id") map { _.as[java.net.URI]}
  lazy val valueAttribute = attributes.get("@value") map { _.as[Int]}
}

      
      


case class Oid(extension: Seq[Extension] = Nil,
  attributes: Map[String, scalaxb.DataRecord[Any]] = Map.empty) extends Elementable {
  lazy val id = attributes.get("@id") map { _.as[java.net.URI]}
  lazy val valueAttribute = attributes.get("@value") map { _.as[java.net.URI]}
}

      
      


case class StringType(extension: Seq[Extension] = Nil,
  attributes: Map[String, scalaxb.DataRecord[Any]] = Map.empty) extends Elementable with ExtensionOption {
  lazy val id = attributes.get("@id") map { _.as[java.net.URI]}
  lazy val valueAttribute = attributes.get("@value") map { _.as[String]}
}

      
      


case class Uri(extension: Seq[Extension] = Nil,
  attributes: Map[String, scalaxb.DataRecord[Any]] = Map.empty) extends Elementable with ExtensionOption {
  lazy val id = attributes.get("@id") map { _.as[java.net.URI]}
  lazy val valueAttribute = attributes.get("@value") map { _.as[java.net.URI]}
}

      
      


case class Uuid(extension: Seq[Extension] = Nil,
  attributes: Map[String, scalaxb.DataRecord[Any]] = Map.empty) extends Elementable {
  lazy val id = attributes.get("@id") map { _.as[java.net.URI]}
  lazy val valueAttribute = attributes.get("@value") map { _.as[java.net.URI]}
}

      
      

